AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EnvType:
    Description: Specify the Environment type of the stack.
    Type: String
    AllowedValues:
      - test
      - prod
    Default: test
    ConstraintDescription: Specify either test or prod.
Conditions:
  IsProduction: !Equals 
    - !Ref EnvType
    - prod
  IsTest: !Equals 
    - !Ref EnvType
    - test

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: 'false'
      EnableDnsHostnames: 'false'
      #InstanceTenancy: dedicated
      Tags:
      - Key: Name
        Value: myVPC
      - Key: Application
        Value: !Ref 'AWS::StackName'

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.10.1.0/24
      Tags:
      - Key: Name
        Value: PublicSubnet
      - Key: Application
        Value: !Ref 'AWS::StackName'

#  PublicRT:
#    Type: AWS::EC2::RouteTable
#    DependsOn: PublicSubnet
#    Properties:
#      VpcId:
#        Ref: PublicSubnet
#      Tags:
#      - Key: Name
#        Value: PublicRT
#      - Key: Application
#        Value: !Ref 'AWS::StackName'
#
#  PublicRoute:
#    Type: AWS::EC2::Route
#    DependsOn: InternetGateway
#    Properties:
#      RouteTableId:
#        Ref: PublicRT
#      DestinationCidrBlock: 0.0.0.0/0
#      GatewayId:
#        Ref: InternetGateway

  dbSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.10.2.0/24
      Tags:
      - Key: Name
        Value: dbSubnet
      - Key: Application
        Value: !Ref 'AWS::StackName'

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.10.3.0/24
      Tags:
      - Key: Name
        Value: PrivateSubnet
      - Key: Application
        Value: !Ref 'AWS::StackName'

#  PrivateRT:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId:
#        Ref: PrivateSubnet
#      Tags:
#        - Key: Application
#          Value: !Ref 'AWS::StackName'

# GW
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public

  AttachGatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        !Ref myVPC
      InternetGatewayId:
        !Ref InternetGateway

##NAT
#  NATGateway:
#     Type: AWS::EC2::NatGateway
#     Properties:
#        AllocationId: !GetAtt NATGatewayEIP.AllocationId
#        SubnetId: !Ref PrivateSubnet
#        Tags:
#        - Key: Application
#          Value: !Ref 'AWS::StackName'
#  NATGatewayEIP:
#     Type: AWS::EC2::EIP
#     Properties:
#        Domain: vpc
#  RouteNATGateway:
#     DependsOn: NATGateway
#     Type: AWS::EC2::Route
#     Properties:
#        RouteTableId: !Ref PrivateRT
#        DestinationCidrBlock: '0.0.0.0/0'
#        NatGatewayId: !Ref NATGateway

#Access key
  myKeyPair:
      Type: 'AWS::EC2::KeyPair'
      Properties:
        KeyName: myKP

#Test Hosts
  Bastion:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-05fa00d4c63e32376
      KeyName:
        Ref: "myKeyPair"
      InstanceType: !If [IsProduction, t2.micro, !If [IsTest, t1.micro, ""]]
      NetworkInterfaces:
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
#        GroupSet:
#          - Ref: "myVPCEC2SecurityGroup"
        SubnetId:
          Ref: "PublicSubnet"
      Tags:
        - Key: Name
          Value: Bastion
        - Key: Application
          Value: !Ref 'AWS::StackName'

  DB:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-05fa00d4c63e32376
      KeyName:
        Ref: "myKeyPair"
      InstanceType: !If [IsProduction, t2.micro, !If [IsTest, t1.micro, ""]]
      NetworkInterfaces:
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
#        GroupSet:
#          - Ref: "myVPCEC2SecurityGroup"
        SubnetId:
          Ref: "dbSubnet"
      Tags:
        - Key: Name
          Value: DB
        - Key: Application
          Value: !Ref 'AWS::StackName'

  Prv:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-05fa00d4c63e32376
      KeyName:
        Ref: "myKeyPair"
      InstanceType: !If [IsProduction, t2.micro, !If [IsTest, t1.micro, ""]]
      NetworkInterfaces:
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
#        GroupSet:
#          - Ref: "myVPCEC2SecurityGroup"
        SubnetId:
          Ref: "PrivateSubnet"
      Tags:
        - Key: Name
          Value: Private
        - Key: Application
          Value: !Ref 'AWS::StackName'

Outputs:
  BastionIp:
    Description: The Instance ID
    Value: !GetAtt Bastion.PrivateIp
  DBIp:
    Description: The Instance ID
    Value: !GetAtt DB.PrivateIp
  PrvIp:
    Description: The Instance ID
    Value: !GetAtt Prv.PrivateIp
  InstanceID:
    Description: The Instance ID
    Value: !Ref Bastion


